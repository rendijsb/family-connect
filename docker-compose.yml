services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: myproject
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: laravel
      MYSQL_PASSWORD: laravel
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
    networks:
      - app-network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket service - Clean configuration without variable substitution
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    environment:
      # Override environment variables to ensure they're set correctly
      BROADCAST_DRIVER: reverb
      REVERB_APP_ID: family-connect
      REVERB_APP_KEY: family-connect-key
      REVERB_APP_SECRET: family-connect-secret
      REVERB_HOST: websocket
      REVERB_PORT: 8080
      REVERB_SCHEME: http
      REVERB_SERVER_HOST: 0.0.0.0
      REVERB_SERVER_PORT: 8080
    command: >
      sh -c "
        echo '🔧 Starting WebSocket Service Setup...' &&
        echo '📊 Environment Check:' &&
        echo 'BROADCAST_DRIVER=' && echo $$BROADCAST_DRIVER &&
        echo 'REVERB_APP_ID=' && echo $$REVERB_APP_ID &&
        echo 'REVERB_APP_KEY=' && echo $$REVERB_APP_KEY &&
        echo 'REVERB_HOST=' && echo $$REVERB_HOST &&
        echo 'REVERB_PORT=' && echo $$REVERB_PORT &&
        echo '' &&
        echo '🧹 Clearing caches...' &&
        php artisan config:clear &&
        php artisan cache:clear &&
        php artisan route:clear &&
        echo '⚙️ Caching fresh config...' &&
        php artisan config:cache &&
        echo '🔍 Running broadcast debug...' &&
        php artisan debug:broadcast &&
        echo '🚀 Starting Reverb WebSocket Server...' &&
        php artisan reverb:start --host=0.0.0.0 --port=8080 --debug
      "
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -sS -m 3 -o /dev/null http://localhost:8080 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Queue Worker Service
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      websocket:
        condition: service_healthy
    networks:
      - app-network
    environment:
      BROADCAST_DRIVER: reverb
      REVERB_APP_ID: family-connect
      REVERB_APP_KEY: family-connect-key
      REVERB_APP_SECRET: family-connect-secret
    command: >
      sh -c "
        echo '🔄 Starting Queue Worker...' &&
        sleep 30 &&
        echo '🧹 Clearing caches for queue worker...' &&
        php artisan config:clear &&
        php artisan cache:clear &&
        php artisan config:cache &&
        echo '👷 Starting queue work...' &&
        php artisan queue:work redis --verbose --tries=3 --timeout=60 --sleep=3 --max-jobs=1000 --max-time=3600
      "
    restart: unless-stopped
    deploy:
      replicas: 1

  frontend:
    build: ./frontend
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - api
      - websocket

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge
