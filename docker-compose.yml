version: "3.8"
services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: myproject
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: laravel
      MYSQL_PASSWORD: laravel
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root
    networks:
      - app-network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      - mysql
    networks:
      - app-network

  # Updated WebSocket service
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    command: >
      sh -c "sleep 10 && php artisan reverb:start --host=0.0.0.0 --port=8080"
    restart: unless-stopped

  # NEW: Queue Worker Service for Real-time Broadcasting
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html
    env_file:
      - ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    command: >
      sh -c "sleep 15 && php artisan queue:work redis --verbose --tries=3 --timeout=60"
    restart: unless-stopped
    deploy:
      replicas: 2  # Run 2 queue workers for better performance

  frontend:
    build: ./frontend
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge